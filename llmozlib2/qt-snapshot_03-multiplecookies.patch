From 076a94d77b72ee1436883d79cb6867c7a89726d3 Mon Sep 17 00:00:00 2001
From: Benjamin C Meyer <ben@meyerhome.net>
Date: Mon, 16 Mar 2009 14:05:22 -0400
Subject: When parsing a cookie string the ',' character is special because
 it is used in the date and to differentiate between multiple cookies.
 When there are multiple set-cookie headers rather then combining them
 with ', ' use '\n' like Firefox because we are 100% sure that we have
 multiple
 cookies and using , can result in cases where the , is interpreted as as
 part
 of the date such as the following

set-cookie:a=b; expires=2009 mar 10
set-cookie:c=d

Combined the old way they result in the second cookie being ignored

a=b; expires=2009 mar 10, c=d

Using '\n' moves our cookie parser closer to Firefox's algorithm which
will result in more behavior and bug for bug compatibility.
Attempting to be smarter about the , will result in incompatibility
with Firefox's implementation (as my first attempt at fixing this bug
resulted).

Also when parsing multiple cookies when we have an error
don't return an empty list of cookies, but return the list of
cookies we were able to parse successfully so far.
---
 src/network/access/qnetworkaccesshttpbackend.cpp |    8 +++++-
 src/network/access/qnetworkcookie.cpp            |   23 ++++++++++++++++-----
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/src/network/access/qnetworkaccesshttpbackend.cpp b/src/network/access/qnetworkaccesshttpbackend.cpp
index f364162..d273cba 100644
--- a/src/network/access/qnetworkaccesshttpbackend.cpp
+++ b/src/network/access/qnetworkaccesshttpbackend.cpp
@@ -762,8 +762,12 @@ void QNetworkAccessHttpBackend::replyHeaderChanged()
 
     for (; it != end; ++it) {
         QByteArray value = rawHeader(it->first);
-        if (!value.isEmpty())
-            value += ", ";
+        if (!value.isEmpty()) {
+            if (it->first.toLower() == "set-cookie")
+                value += "\n";
+            else
+                value += ", ";
+        }
         value += it->second;
         setRawHeader(it->first, value);
     }
diff --git a/src/network/access/qnetworkcookie.cpp b/src/network/access/qnetworkcookie.cpp
index 4b52b6b..1656714 100644
--- a/src/network/access/qnetworkcookie.cpp
+++ b/src/network/access/qnetworkcookie.cpp
@@ -725,10 +725,13 @@ static QDateTime parseDateString(const QByteArray &dateString)
                 && isNumber(dateString[at + 1]))
                 ++length;
             int x = atoi(dateString.mid(at, length).constData());
-            if ((x > 31 || x == 0) && year == -1) year = x;
-            else if (unknown[0] == -1) unknown[0] = x;
-            else if (unknown[1] == -1) unknown[1] = x;
-            else if (unknown[2] == -1) unknown[2] = x;
+            if ((x > 31 || x == 0) && year == -1) {
+                year = x;
+            } else {
+                if (unknown[0] == -1) unknown[0] = x;
+                else if (unknown[1] == -1) unknown[1] = x;
+                else if (unknown[2] == -1) unknown[2] = x;
+            }
             at += length;
 #ifdef PARSEDATESTRINGDEBUG
             qDebug() << "Saving" << x;
@@ -736,7 +739,7 @@ static QDateTime parseDateString(const QByteArray &dateString)
             continue;
         }
 
-        // Unknown character
+        // Unknown character, typically a weekday such as 'Mon'
         ++at;
     }
 
@@ -914,11 +917,17 @@ QList<QNetworkCookie> QNetworkCookie::parseCookies(const QByteArray &cookieStrin
     while (position < length) {
         QNetworkCookie cookie;
 
+        // When there are multiple SetCookie headers they are join with a new line
+        // \n will always be the start of a new cookie
+        int endOfSetCookie = cookieString.indexOf('\n');
+        if (endOfSetCookie == -1)
+            endOfSetCookie = length;
+
         // The first part is always the "NAME=VALUE" part
         QPair<QByteArray,QByteArray> field = nextField(cookieString, position);
         if (field.first.isEmpty() || field.second.isNull())
             // parsing error
-            return QList<QNetworkCookie>();
+            break;
         cookie.setName(field.first);
         cookie.setValue(field.second);
 
@@ -986,6 +995,8 @@ QList<QNetworkCookie> QNetworkCookie::parseCookies(const QByteArray &cookieStrin
                 }
 
                 position = nextNonWhitespace(cookieString, position);
+                if (position > endOfSetCookie)
+                    endOfCookie = true;
             }
 
         result += cookie;
-- 
1.6.0.4

